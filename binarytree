import 'dart:collection';

class Node<T> {
  T nodeValue;
  Node<T>? left, right;

  Node(this.nodeValue);
}

class BinaryTree<T> {
  Node<T>? root;

  BinaryTree() {
    root = null;
  }

  void InOrderDisplay(Node? node) {
    if (node != null) {
      InOrderDisplay(node.left);
      print('${node.nodeValue} ');
      InOrderDisplay(node.right);
    }
  }
  void printInOrderFromRoot() {
    InOrderDisplay(root);
  }

  void PreOrderDisplay(Node? node) {
    if (node != null) {
      print('${node.nodeValue} ');
      PreOrderDisplay(node.left);
      PreOrderDisplay(node.right);
    }
  }
  void printPreOrderFromRoot() {
    PreOrderDisplay(root);
  }

  void postOrderDisplay(Node? node) {
    if (node != null) {
      postOrderDisplay(node.left);
      postOrderDisplay(node.right);
      print('${node.nodeValue} ');
    }
  }
  void printPostOrderFromRoot() {
    postOrderDisplay(root);
  }

int maxDepth(Node? node) {
  if(node == null) {
    return 0;
  } else {
    int lDepth = maxDepth(node.left);
    int rDepth = maxDepth(node.right);
    return lDepth > rDepth ? lDepth + 1: rDepth + 1;
  }
}

//level order Traversal
  void printLevelOrder() {
    int h = height(root);
    for (int i = 0; i <= h; i++) {
      printCurrentLevel (root, i);
    }
  }

  int height (Node<T>? root) {
    if (root == null) {
      return 0;
    } else {
      int lheight = height(root.left);
      int rheight = height(root.right);
      return lheight > rheight ? lheight + 1 : rheight + 1;
    }
  }

  void printCurrentLevel(Node? root, int Level) {
    if (root != null) {
      if(Level == 0) {
        print('${root.nodeValue} ');
      } else if (Level >= 1) {
        printCurrentLevel(root.left, Level - 1);
        printCurrentLevel(root.right, Level - 1);
      }
    }
  }

  void deleteDeepest(Node root, Node delNode) {
    Queue<Node> q = Queue();
    q.add(root);
    Node? temp;

    while (q.isNotEmpty) {
      temp = q.removeFirst();
      if (temp == delNode) {
        temp = null;
        return;
      }
      if (temp.right != null) {
        if (temp.right == delNode) {
          temp.right = null;
          return;
        } else {
          q.add(temp.right!);
        }
      }
      if (temp.left != null) {
        if (temp.left == delNode) {
          temp.left = null;
          return;
        } else {
          q.add(temp.left!);
        }
      }
    }
  }

  void delete(Node? root, int nodeValue) {
    if (root == null) {
      return;
    }
    if (root.left == null && root.right == null) {
      if (root.nodeValue == nodeValue) {
        root = null;
      }
      return;
    }
    Queue<Node> q = Queue();
    q.add(root);
    Node? temp;
    Node? newNode;

    while (q.isNotEmpty) {
      temp = q.removeFirst();
      if (temp.nodeValue == nodeValue) {
        newNode = temp;
      }
      if (temp.left != null) {
        q.add(temp.left!);
      }
      if (temp.right != null) {
        q.add(temp.right!);
      }
    } 
    if (newNode != null) {
      dynamic x = temp!.nodeValue;
      deleteDeepest(root, temp);
      newNode.nodeValue = x;
    }
  }
}


void main() {
  BinaryTree t = BinaryTree();
  t.root = Node(10);
  t.root!.left = Node(20);
  t.root!.right = Node(30);
  t.root!.right!.left = Node(4);

  print("InOrder traversal of Binary tree: ");
  t.printInOrderFromRoot();

  print("Height of Binary tree: ${t.maxDepth(t.root)}");

  t.delete(t.root, 19);

  print("InOrder traversal of Binary tree: ");
  t.printInOrderFromRoot();

  print("Nilai pada level tertentu pada Binary tree: ");
  t.printCurrentLevel(t.root, 1);

  // print("PreOrder traversal of Binary tree: ");
  // t.printPreOrderFromRoot();

  // print("PostOrder traversal of Binary tree: ");
  // t.printPostOrderFromRoot();
}
